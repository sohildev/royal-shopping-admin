{"version":3,"sources":["webpack:///src/app/subscribe/subscribe-list/subscribe-list.component.html","webpack:///src/app/service/subscribe.service.ts","webpack:///src/app/subscribe/subscribe-list/subscribe-list.component.ts","webpack:///src/app/subscribe/subscribe-list/subscribe-list.module.ts"],"names":["SubscribeService","http","API_URL","APIEndpoint","param","get","params","data","post","id","put","SubscribeListComponent","router","paginationService","subscribeservice","dataService","fBuilder","loadingState","objectArray","questionArray","pagination","searchText","currentPage","formErrors","apierror","showLoader","showAddForm","isEditing","editId","editIndex","loadform","permissionObject","addForm","group","compose","required","email","subscription","searchTextSubject","subscribe","v","getObjects","page","search","getSubscribeList","response","success","getPager","error","text","object","swal","fire","title","delete_header_text","delete_smalll_text","icon","delete_dialogue_type","showCancelButton","confirmButtonText","delete_confirm_button","cancelButtonText","delete_cancel_button","then","result","value","deleteSubscribe","noop","index","resetForm","patchValue","valid","formData","editSubscribe","map","obj","hasOwnProperty","console","log","addSubscribe","unsubscribe","selector","template","routes","path","component","SubscribeListModule","declarations","imports","forChild","providers"],"mappings":"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","file":"subscribe-subscribe-list-subscribe-list-module-es5.js","sourcesContent":["export default \"<loder [show]=\\\"loadingState\\\"></loder>\\n<div class=\\\"page-breadcrumb\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-7 align-self-center\\\">\\n            <h4 class=\\\"page-title text-truncate text-dark font-weight-medium mb-1\\\">Subscribe</h4>\\n            <div class=\\\"d-flex align-items-center\\\">\\n                <nav aria-label=\\\"breadcrumb\\\">\\n                    <ol class=\\\"breadcrumb m-0 p-0\\\">\\n                        <li class=\\\"breadcrumb-item\\\"><a [routerLink]=\\\"['/dashboard']\\\"\\n                                routerLinkActive=\\\"router-link-active\\\" class=\\\"text-muted\\\">Apps</a></li>\\n                        <li class=\\\"breadcrumb-item text-muted active\\\" aria-current=\\\"page\\\">Subscribe List</li>\\n                    </ol>\\n                </nav>\\n            </div>\\n        </div>\\n\\n        <div class=\\\"col-5 align-self-center\\\">\\n            <div class=\\\"customize-input float-right\\\">\\n                <button type=\\\"button\\\" (click)=\\\"showForm()\\\"\\n                    class=\\\"btn btn-outline-info  border-0 custom-shadow custom-radius\\\">Add Subscribe</button>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\\n\\n<div class=\\\"content\\\">\\n    <section class=\\\"page-content container-fluid\\\">\\n        <div class=\\\"card strache-card\\\">\\n            <div class=\\\"card-body p-0\\\">\\n                <div class=\\\"table-responsive\\\">\\n                    <table class=\\\"table table-hover m-0\\\">\\n                        <thead>\\n                            <tr>\\n                                <th>Email</th>\\n                                <th class=\\\"table-field-actions text-center\\\">Action</th>\\n                            </tr>\\n                        </thead>\\n                        <tbody>\\n                            <tr *ngIf=\\\"showAddForm && !isEditing\\\">\\n                                <td colspan=\\\"2\\\">\\n                                    <form [formGroup]=\\\"addForm\\\" (ngSubmit)=\\\"submitForm()\\\">\\n                                        <div class=\\\"d-flex \\\">\\n                                            <div class=\\\"form-group mb-0 flex-grow-1 pr-2\\\">\\n                                                <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Enter Email...\\\"\\n                                                    [formControl]=\\\"addForm.controls['email']\\\">\\n                                            </div>\\n\\n                                            <div>\\n                                                <button type=\\\"submit\\\" [disabled]=\\\"showLoader\\\"\\n                                                    class=\\\"btn btn-outline-success btn-rounded btn-circle mr-2\\\">\\n                                                    <i *ngIf=\\\"!showLoader\\\" class=\\\"fas fa-check\\\"></i>\\n                                                    <i *ngIf=\\\"showLoader\\\" class=\\\"fa fa-spinner fa-spin\\\"></i>\\n                                                </button>\\n\\n                                                <button type=\\\"button\\\" (click)=\\\"resetForm()\\\"\\n                                                    class=\\\"btn btn-outline-secondary  btn-rounded btn-circle mr-2\\\"><i\\n                                                        class=\\\"fas fa-times\\\"></i> </button>\\n                                            </div>\\n                                        </div>\\n                                    </form>\\n                                </td>\\n                            </tr>\\n                            <tr *ngFor=\\\"let item of objectArray; let i=index\\\">\\n                                <ng-container *ngIf=\\\"editId != item?.id\\\">\\n                                    <td>{{item?.email}}</td>\\n\\n                                    <td class=\\\"table-field-actions text-center\\\">\\n                                        <div class=\\\"action-drop dropdown\\\">                                          \\n                                            <button role=\\\"button\\\" type=\\\"button\\\"\\n                                                class=\\\"btn btn-link text-primary p-0 px-2  btn-sm btn-icon-only\\\" data-toggle=\\\"dropdown\\\">\\n                                                <i class=\\\"fa fa-ellipsis-h\\\"></i>\\n                                            </button>\\n                                            <div class=\\\"dropdown-menu dropdown-icon-menu dropdown-menu-right\\\">\\n                                                <a (click)=\\\"editObject(item, i)\\\" class=\\\"dropdown-item\\\"><i\\n                                                        class=\\\"fa fa-edit fa-fw text-primary\\\">\\n                                                    </i> Edit</a>\\n                                                <a  (click)=\\\"deleteObject(item)\\\" class=\\\"dropdown-item\\\"><i\\n                                                        class=\\\"fa fa-trash fa-fw text-primary\\\">\\n                                                    </i> Delete</a>\\n                                            </div>\\n                                        </div>\\n                                    </td>\\n\\n                                 \\n\\n\\n                                </ng-container>\\n\\n                                <ng-container *ngIf=\\\"isEditing && editId == item?.id && i == editIndex\\\">\\n                           \\n                                <td colspan=\\\"2\\\">\\n                                    <form [formGroup]=\\\"addForm\\\" (ngSubmit)=\\\"submitForm()\\\">\\n                                        <div class=\\\"d-flex\\\">\\n                                            <div class=\\\"form-group mb-0 flex-grow-1 pr-2\\\">\\n                                                <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Enter Email...\\\"\\n                                                    [formControl]=\\\"addForm.controls['email']\\\">\\n                                            </div>\\n\\n\\n                                            <div>\\n                                                <button type=\\\"submit\\\" [disabled]=\\\"showLoader\\\"\\n                                                    class=\\\"btn btn-outline-success btn-rounded btn-circle mr-2\\\">\\n                                                    <i *ngIf=\\\"!showLoader\\\" class=\\\"fas fa-check\\\"></i>\\n                                                    <i *ngIf=\\\"showLoader\\\" class=\\\"fa fa-spinner fa-spin\\\"></i>\\n                                                </button>\\n\\n                                                <button type=\\\"button\\\" (click)=\\\"resetForm()\\\"\\n                                                    class=\\\"btn btn-outline-secondary  btn-rounded btn-circle mr-2\\\"><i\\n                                                        class=\\\"fas fa-times\\\"></i> </button>\\n                                            </div>\\n                                            \\n                                        </div>\\n                                    </form>\\n                                </td>\\n                            \\n                            </ng-container>\\n                            </tr>\\n\\n                            <tr *ngIf=\\\"objectArray.length === 0 && !showAddForm\\\">\\n                                <td colspan=\\\"2\\\"> No records found</td>\\n                            </tr>\\n                        </tbody>\\n                    </table>\\n                </div>\\n                <pagination [paginationList]=\\\"pagination\\\" [currentPage]=\\\"currentPage\\\" (onPageChange)=\\\"getPage($event)\\\">\\n                </pagination>\\n            </div>\\n        </div>\\n    </section>\\n</div>\";","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable()\nexport class SubscribeService {\n\n  API_URL: string = environment.APIEndpoint;\n\n  constructor(\n    private http: HttpClient,\n  ) { }\n\n  getSubscribeList(param): Observable<any> {\n    return this.http.get(`${this.API_URL}/subscribe`, { params: param });\n  }\n\n  addSubscribe(data): Observable<any> {\n    return this.http.post(`${this.API_URL}/subscribe`, data);\n  }\n\n  editSubscribe(id, data): Observable<any> {\n    return this.http.put(`${this.API_URL}/subscribe/${id}`, data);\n  }\n\n  deleteSubscribe(id): Observable<any> {\n    return this.http.delete(`${this.API_URL}/subscribe/${id}`);\n  }\n\n  getSubscribeById(id, param = null): Observable<any> {\n    return this.http.get(`${this.API_URL}/subscribe/${id}`, { params: param });\n  }\n}","declare var swal: any;\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { errorMessage } from 'src/app/messages';\nimport { DataService } from 'src/app/service/data.service';\nimport { PaginationService } from 'src/app/service/pagination.service';\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { CommonFunction } from 'src/app/common';\nimport { ISubscription } from \"rxjs/Subscription\";\nimport { SubscribeService } from 'src/app/service/subscribe.service';\n\n@Component({\n  selector: 'app-subscribe-list',\n  templateUrl: './subscribe-list.component.html'\n})\nexport class SubscribeListComponent implements OnInit {\n\n  // listing\n  loadingState = true;\n  objectArray: Array<any> = [];\n  questionArray: Array<any> = [];\n  pagination: any = null;\n  searchText: any = null;\n  currentPage: any = 1;\n  private subscription: ISubscription;\n\n  // form\n  addForm: FormGroup;\n  formErrors = {\n    apierror: null\n  };\n  showLoader = false;\n  showAddForm = false; // add\n  isEditing = false; // edit\n  editId: string = null; // edit\n  editIndex: string = null; // edit\n  loadform = false;\n  permissionObject: any = null;\n\n  constructor(\n    private router: Router,\n    private paginationService: PaginationService,\n    private subscribeservice: SubscribeService,\n    private dataService: DataService,\n    private fBuilder: FormBuilder,\n  ) {\n    this.addForm = this.fBuilder.group({\n      'email': [null, Validators.compose([Validators.required,Validators.email])],\n    });\n  }\n\n  ngOnInit() {\n    this.subscription= this.dataService.searchTextSubject.subscribe((v) =>{ \n      this.searchText=v;\n      this.getObjects();\n    });\n  }\n\n\n\n  getObjects() {\n    const params: any = { page: this.currentPage };\n    if (this.searchText) {\n      params.search = this.searchText;\n    }\n    this.subscribeservice.getSubscribeList(params).subscribe((response) => {\n      this.loadingState = false;\n      if (response.success) {\n        this.objectArray = response.data.data;\n        this.pagination = this.paginationService.getPager(response.data.pagination['total_page'], this.currentPage);\n      } else {\n        this.objectArray = [];\n        this.pagination = null;\n      }\n    }, (error) => {\n      this.loadingState = false;\n      this.objectArray = [];\n      this.pagination = null;\n    });\n  }\n\n  getPage(page: number) {\n    this.currentPage = page;\n    this.getObjects();\n  }\n\n  searchObject(text) {\n    this.searchText = text;\n    this.currentPage = 1;\n    this.getObjects();\n  }\n\n\n\n  deleteObject(object) {\n    swal.fire({\n      title: errorMessage.delete_header_text,\n      text: errorMessage.delete_smalll_text,\n      icon: errorMessage.delete_dialogue_type,\n      showCancelButton: true,\n      confirmButtonText: errorMessage.delete_confirm_button,\n      cancelButtonText: errorMessage.delete_cancel_button,\n    }).then((result) => {\n      if (result.value) {\n        this.subscribeservice.deleteSubscribe(object.id).subscribe(\n          (response) => {\n            if (response.success) {\n              this.getObjects();\n            }\n          },\n        );\n      }\n    }).catch(swal.noop);\n  }\n\n  editObject(object, index) {\n    this.resetForm();\n    this.editIndex = index;\n    this.isEditing = true;\n    this.editId = object.id;\n    this.addForm.patchValue({\n      'email': object.email\n    });\n  }\n\n \n\n  showForm() {\n    this.resetForm();\n    this.showAddForm = true;\n  }\n\n  resetForm() {\n    this.showAddForm = false;\n    this.isEditing = false;\n    this.editId = null;\n    CommonFunction.resetForm(this.addForm, this.formErrors);\n  }\n\n\n  submitForm(): void {\n    if (this.addForm.valid) {\n      this.showLoader = true;\n      const formData = {\n        'email': this.addForm.value.email\n      };\n      if (this.isEditing) {\n\n        this.subscribeservice.editSubscribe(this.editId, formData).subscribe((response) => {\n          this.showLoader = false;\n          if (response.success) {\n            this.getObjects();\n            this.resetForm();\n          } else {\n            response.error.map(obj => {\n              if (obj.hasOwnProperty('email')) {\n                this.formErrors['email'] = obj['email'];\n              } else {\n                this.formErrors['apierror'] = `* ${response.error}`;\n              }\n            });\n          }\n        }, (error) => {\n          console.log('In error', error);\n          this.formErrors['apierror'] = `* ${error.error}`;\n          this.showLoader = false;\n        });\n      } else {\n        this.subscribeservice.addSubscribe(formData).subscribe((response) => {\n          // console.log('In success', response);\n          this.showLoader = false;\n          if (response.success) {\n            this.resetForm();\n            this.getObjects();\n          } else {\n            response.error.map(obj => {\n              if (obj.hasOwnProperty('email')) {\n                this.formErrors['email'] = obj['email'];\n              } else {\n                this.formErrors['apierror'] = `* ${response.error}`;\n              }\n            });\n          }\n        }, (error) => {\n          console.log('In error', error);\n          this.formErrors['apierror'] = `* ${error.error}`;\n          this.showLoader = false;\n        });\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\nimport { SubscribeListComponent } from './subscribe-list.component';\nimport { LoderModule } from 'src/app/common/loder/loder.module';\nimport { PaginationModule } from 'src/app/common/pagination/pagination.module';\nimport { SubscribeService } from 'src/app/service/subscribe.service';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SubscribeListComponent,\n    // data: { title: 'company_list' }\n  }\n];\n\n@NgModule({\n  declarations: [\n    SubscribeListComponent\n  ],\n  imports: [\n    CommonModule,\n    LoderModule,\n    ReactiveFormsModule,\n    PaginationModule,\n    RouterModule.forChild(routes)\n  ],\n  providers: [\n    SubscribeService\n  ]\n})\n\nexport class SubscribeListModule { }\n"]}